import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split

import tensorflow as tf
import joblib

st.set_page_config(page_title="Models predictions", page_icon="üìà")


regression_data = pd.read_csv("data/regression_preprocessed_data")

X_reg = regression_data.drop(columns= 'price')
y_reg = regression_data['price']

X_train_reg, X_test_reg, y_train_reg, y_test_reg = train_test_split(X_reg, y_reg, test_size= .3)


st.title('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏')

first_model = joblib.load("models/MODEL_ONE_polynomial_best_regression_model.pkl")
fourth_model = joblib.load("models/MODEL_FOUR_bagging_regressor")
fiveth_model = joblib.load("models/MODEL_FIVE_stacking_regressor")
second_model = joblib.load("models/MODEL_TWO_gradient_boosting_regressor")


area = st.slider('–ü–ª–æ—â–∞–¥—å –¥–æ–º–∞', 503, 8000, 1500)

latitude = st.slider('–®–∏—Ä–æ—Ç–∞ –¥–æ–º–∞', min_value=18.873713, max_value=19.476239, step=0.001)

longitude = st.slider('–î–æ–ª–≥–æ—Ç–∞ –¥–æ–º–∞', min_value=72.754080, max_value=73.197823, step=0.001)

bedrooms = st.number_input('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω', min_value=2, step=1, max_value=10) # (2, 3, 4, 5, 6, 7, 8, 9, 10)
 
balcony = st.number_input('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–∫–æ–Ω–æ–≤', min_value=0, step=1, max_value=8)

bathrooms = st.number_input('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–Ω–Ω', min_value=0, step=1, max_value=10)

parking = st.radio('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç', (0, 1, 2, 3, 4, 5, 6, 7, 8))

furnished_status = st.radio('–°—Ç–∞—Ç—É—Å –æ–º–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –¥–æ–º–∞', ("–ù–µ—Ç –º–µ–±–µ–ª–∏", "–ß–∞—Å—Ç–∏—á–Ω–æ", "–•–æ—Ä–æ—à–æ –æ—Å–Ω–∞—â–µ–Ω–æ –º–µ–±–µ–ª—å—é"))
if furnished_status == "–ù–µ—Ç –º–µ–±–µ–ª–∏": furnished_status = 0
elif furnished_status == "–ß–∞—Å—Ç–∏—á–Ω–æ": furnished_status = 0.5
else: furnished_status = 1

lift = st.number_input('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ñ—Ç–æ–≤', min_value=0, step=1, max_value=8)

type_of_building = st.radio('–î–æ–º –∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä–∞', ("–î–æ–º", "–ö–≤–∞—Ä—Ç–∏—Ä–∞"))
if type_of_building == '–î–æ–º': 
    type_of_building_House = 1
    type_of_building_Flat = 0
else:
    type_of_building_House = 0
    type_of_building_Flat = 1

status = st.radio('–°—Ç–∞—Ç—É—Å –¥–æ–º–∞', ("–ì–æ—Ç–æ–≤—ã–π –∫ –∑–∞—Å–µ–ª–µ–Ω–∏—é", "–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Å—Ç—Ä–æ–µ–Ω–∏—è"))
if status == "–ì–æ—Ç–æ–≤—ã–π –∫ –∑–∞—Å–µ–ª–µ–Ω–∏—é":
    status_True = 1
    status_False = 0
else:
    status_True = 0
    status_False = 1

neworold = st.radio('–ù–æ–≤—ã–π –∏–ª–∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞', ("–ù–æ–≤—ã–π", "–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"))
if neworold == "–ù–æ–≤—ã–π":
    neworold_True = 1
    neworold_False = 0
else:
    neworold_True = 0
    neworold_False = 1

# print(X_test)
test_data = pd.DataFrame(
    {
        'area': [area],
        'latitude': [latitude],
        'longitude': [longitude],
        'bedrooms': [bedrooms],
        'bathrooms': [bathrooms],
        'balcony': [balcony],
        'parking': [parking],
        'furnished_status': [furnished_status],
        'lift': [lift],
        'type_of_building_Flat': [type_of_building_Flat],
        'type_of_building_Individual House': [type_of_building_House],
        'status_False': [status_False],
        'status_True': [status_True],
        'neworold_False': [neworold_False],
        'neworold_True': [neworold_True]
    }
)
if st.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–º–∞'):
    first_prediction = int(first_model.predict(test_data)[0])
    st.text(f'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏e –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: {first_prediction}')
    four_prediction = int(fourth_model.predict(test_data)[0])
    st.text(f'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏e –±—ç–≥–≥–∏–Ω–≥ –º–æ–¥–µ–ª–∏: {four_prediction}')
    five_prediction = int(fiveth_model.predict(test_data)[0])
    st.text(f'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏e —Å—Ç—ç–∫–∏–Ω–≥ –º–æ–¥–µ–ª–∏: {five_prediction}')
    two_prediction = int(second_model.predict(test_data)[0])
    st.text(f'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏e –º–æ–¥–µ–ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ –±—É—Å—Ç–∏–Ω–≥–∞: {two_prediction}')




# 2
classification_data = pd.read_csv("data/classification_preprocessed_data")

X_class = classification_data.drop(columns= 'Fire Alarm')
y_class = classification_data['Fire Alarm']
X_train_class, X_test_class, y_train_class, y_test_class = train_test_split(X_class, y_class, test_size= .3)




st.title('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏')

sixth_model = tf.keras.models.load_model("models/MODEL_SIX_classification_NN")
third_model = joblib.load("models/MODEL_THREE_gradient_boosting_classifier")

Temperature = st.slider('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', -22.010000, 59.930000, 10.0)
Humidity = st.slider('–í–ª–∞–∂–Ω–æ—Å—Ç—å', 10.740000, 75.200000, 10.0)
TVOC = st.slider('–ò–Ω–¥–µ–∫—Å –Ω–∞–ª–∏—á–∏—è –õ–µ—Ç—É—á–∏—Ö –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π', 0.0, 60000.000000, 1000.0)
eCO2 = st.slider('–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç —É–≥–ª–µ–∫–∏—Å–ª–æ–≥–æ –≥–∞–∑–∞', 400.000000, 60000.000000, 10000.0)
Raw_H2 = st.slider('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤–æ–¥–æ—Ä–æ–¥', 10668.000000, 13803.000000, 1500.0)
Raw_Ethanol = st.slider('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —ç—Ç–∞–Ω–æ–ª', 15317.000000, 21410.000000, 1500.0)
Pressure = st.slider('–î–∞–≤–ª–µ–Ω–∏–µ', 930.852000, 939.861000, 1500.0)
PM1_0 = st.slider('–£–ª—å—Ç—Ä–∞–¥–∏—Å–ø–µ—Ä—Å–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã', 0.0, 14333.690000, 1500.0)
PM2_5 = st.slider('–ú–µ–ª—å—á–∞–π—à–∏–µ —á–∞—Å—Ç–∏—Ü—ã', 0.0, 45432.260000, 1500.0)
NC0_5 = st.slider('–ö–æ—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Ç–≤—ë—Ä–¥—ã—Ö —á–∞—Å—Ç–∏—Ü –¥–∏–∞–º–µ—Ç—Ä–æ–º –º–µ–Ω—å—à–µ 0.5 –º–∫–º', 0.0, 61482.030000, 3000.0)
NC1_0 = st.slider('–ö–æ—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Ç–≤—ë—Ä–¥—ã—Ö —á–∞—Å—Ç–∏—Ü –¥–∏–∞–º–µ—Ç—Ä–æ–º –º–µ–Ω—å—à–µ 1.0 –º–∫–º', 0.0, 51914.680000, 3000.0)
NC2_5 = st.slider('–ö–æ—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Ç–≤—ë—Ä–¥—ã—Ö —á–∞—Å—Ç–∏—Ü –¥–∏–∞–º–µ—Ç—Ä–æ–º –º–µ–Ω—å—à–µ 2.5 –º–∫–º', 0.0, 30026.438000, 1500.0)


test_data = pd.DataFrame(
    {
        'Temperature': [Temperature],
        'Humidity': [Humidity],
        'TVOC': [TVOC],
        'eCO2': [eCO2],
        'Raw H2': [Raw_H2],
        'Raw Ethanol': [Raw_Ethanol],
        'Pressure': [Pressure],
        'PM1.0': [PM1_0],
        'PM2.5': [PM2_5],
        'NC0.5': [NC0_5],
        'NC1.0': [NC1_0],
        'NC2.5': [NC2_5]
    }
)
if st.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∂–∞—Ä–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞'):
    three_prediction = int(third_model.predict(test_data)[0])
    st.text(f'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏e –º–æ–¥–µ–ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ –±—É—Å—Ç–∏–Ω–≥–∞: {three_prediction}')
    six_prediction = int(sixth_model.predict(test_data)[0])
    st.text(f'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏e –º–æ–¥–µ–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {six_prediction}')
    # five_prediction = int(fiveth_model.predict(test_data)[0])
    # st.text(f'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏e —Å—Ç—ç–∫–∏–Ω–≥ –º–æ–¥–µ–ª–∏: {five_prediction}')


# —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
# —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏ ML (—Å–º. –ø. 1): —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ
# *.csv, —Å–¥–µ–ª–∞—Ç—å –≤–≤–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö
# –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
